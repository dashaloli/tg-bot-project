import asyncio
import aiohttp
import os
import logging
from pathlib import Path
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramNetworkError
from sqlalchemy import create_engine, Column, Integer, String, Float, Text
from sqlalchemy.orm import declarative_base, sessionmaker
from sqlalchemy.orm import Session

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "7619827644:AAGXHNp-GuSpOcJF5FMNZ7-D3tzvOcMyrsw"
FASHION_API_KEY = os.getenv("FASHION_API_KEY", "mock_api_key")
ITEMS_PER_PAGE = 5
UPLOAD_DIR = Path("uploads")
UPLOAD_DIR.mkdir(exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, timeout=30)
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SQLAlchemy ORM
Base = declarative_base()


# –ú–æ–¥–µ–ª—å —Ç–æ–≤–∞—Ä–∞
class Product(Base):
    __tablename__ = "products"
    id = Column(Integer, primary_key=True)
    name = Column(String(100), nullable=False)
    price = Column(Float, nullable=False)
    category = Column(String(50))
    description = Column(Text)
    image_path = Column(String(255))
    size = Column(String(20))
    color = Column(String(30))


# –ú–æ–¥–µ–ª—å –∫–ª–∏–µ–Ω—Ç–∞
class Client(Base):
    __tablename__ = "clients"
    id = Column(Integer, primary_key=True)
    full_name = Column(String(100), nullable=False)
    phone = Column(String(20), nullable=False)
    email = Column(String(100))
    address = Column(Text)


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
engine = create_engine("sqlite:///./fashion_shop.db", echo=False)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base.metadata.create_all(bind=engine)


# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏ –ë–î
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


async def get_fashion_trends():
    api_url = "https://6824dee00f0188d7e72b3020.mockapi.io/fashion-trends"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(api_url) as response:
                if response.status == 200:
                    return await response.json()
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ API: HTTP {response.status}")
                    return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return []


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üõç –¢–æ–≤–∞—Ä—ã", callback_data="products"),
        InlineKeyboardButton(text="üëó –¢—Ä–µ–Ω–¥—ã", callback_data="trends")
    )
    builder.row(
        InlineKeyboardButton(text="‚ÑπÔ∏è –û –Ω–∞—Å", callback_data="about"),
        InlineKeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")
    )
    return builder.as_markup()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ–¥–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=main_menu()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /trends
@dp.message(Command("trends"))
async def show_fashion_trends(message: types.Message):
    trends = await get_fashion_trends()
    if not trends:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–µ–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    items = trends[:ITEMS_PER_PAGE]
    kb_builder = InlineKeyboardBuilder()

    for item in items:
        button_text = f"{item.get('name')} - {item.get('price', 'N/A')}‚ÇΩ"
        kb_builder.button(text=button_text, callback_data=f"trend_{item.get('id')}")

    kb_builder.adjust(1)
    await message.answer("üî• –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–æ–¥–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã:", reply_markup=kb_builder.as_markup())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–¢—Ä–µ–Ω–¥—ã" –∏–∑ –º–µ–Ω—é
@dp.callback_query(F.data == "trends")
async def trends_callback(callback: types.CallbackQuery):
    await show_fashion_trends(callback.message)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–¢–æ–≤–∞—Ä—ã" –∏–∑ –º–µ–Ω—é
@dp.callback_query(F.data == "products")
async def products_callback(callback: types.CallbackQuery):
    await callback.message.answer("üõç –†–∞–∑–¥–µ–ª —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û –Ω–∞—Å" –∏–∑ –º–µ–Ω—é
@dp.callback_query(F.data == "about")
async def about_callback(callback: types.CallbackQuery):
    await callback.message.answer("‚ÑπÔ∏è –ú—ã - –º–æ–¥–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω —Å –ª—É—á—à–∏–º–∏ —Ç—Ä–µ–Ω–¥–∞–º–∏ —Å–µ–∑–æ–Ω–∞!")
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–æ–Ω—Ç–∞–∫—Ç—ã" –∏–∑ –º–µ–Ω—é
@dp.callback_query(F.data == "contacts")
async def contacts_callback(callback: types.CallbackQuery):
    await callback.message.answer("üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n–¢–µ–ª–µ—Ñ–æ–Ω: +7 (123) 456-78-90\nEmail: info@fashion-shop.com")
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ—Ç–∞–ª–µ–π —Ç—Ä–µ–Ω–¥–∞
@dp.callback_query(F.data.startswith("trend_"))
async def trend_detail(callback: types.CallbackQuery):
    trend_id = callback.data.split("_")[1]
    trends = await get_fashion_trends()
    trend = next((item for item in trends if str(item.get("id")) == trend_id), None)

    if trend:
        response = (f"üî• {trend.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n\n"
                    f"üíµ –¶–µ–Ω–∞: {trend.get('price', 'N/A')}‚ÇΩ\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {trend.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n\n"
                    f"üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {trend.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
        await callback.message.answer(response)
    else:
        await callback.message.answer("–¢—Ä–µ–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    await callback.answer()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
